//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PruebaTecnicaCorporacionTAK.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class PruebaTecnicaTakDBEntities : DbContext
    {
        public PruebaTecnicaTakDBEntities()
            : base("name=PruebaTecnicaTakDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<COLABORADOR> COLABORADOR { get; set; }
    
        public virtual int SP_ELIMINAR_COLABORADOR(Nullable<int> idColaborador)
        {
            var idColaboradorParameter = idColaborador.HasValue ?
                new ObjectParameter("idColaborador", idColaborador) :
                new ObjectParameter("idColaborador", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ELIMINAR_COLABORADOR", idColaboradorParameter);
        }
    
        public virtual int SP_INSERTAR_COLABORADOR(string nombres, string apellidos, Nullable<System.DateTime> fechaNacimiento, string estadoCivil, string gradoAcademico, string direccion)
        {
            var nombresParameter = nombres != null ?
                new ObjectParameter("nombres", nombres) :
                new ObjectParameter("nombres", typeof(string));
    
            var apellidosParameter = apellidos != null ?
                new ObjectParameter("apellidos", apellidos) :
                new ObjectParameter("apellidos", typeof(string));
    
            var fechaNacimientoParameter = fechaNacimiento.HasValue ?
                new ObjectParameter("fechaNacimiento", fechaNacimiento) :
                new ObjectParameter("fechaNacimiento", typeof(System.DateTime));
    
            var estadoCivilParameter = estadoCivil != null ?
                new ObjectParameter("estadoCivil", estadoCivil) :
                new ObjectParameter("estadoCivil", typeof(string));
    
            var gradoAcademicoParameter = gradoAcademico != null ?
                new ObjectParameter("gradoAcademico", gradoAcademico) :
                new ObjectParameter("gradoAcademico", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("direccion", direccion) :
                new ObjectParameter("direccion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_INSERTAR_COLABORADOR", nombresParameter, apellidosParameter, fechaNacimientoParameter, estadoCivilParameter, gradoAcademicoParameter, direccionParameter);
        }
    
        public virtual ObjectResult<SP_LISTA_COLABORADOR_Result1> SP_LISTA_COLABORADOR()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_LISTA_COLABORADOR_Result1>("SP_LISTA_COLABORADOR");
        }
    
        public virtual int SP_ACTUALIZAR_COLABORADOR(Nullable<int> idColaborador, string nombres, string apellidos, Nullable<System.DateTime> fechaNacimiento, string estadoCivil, string gradoAcademico, string direccion)
        {
            var idColaboradorParameter = idColaborador.HasValue ?
                new ObjectParameter("idColaborador", idColaborador) :
                new ObjectParameter("idColaborador", typeof(int));
    
            var nombresParameter = nombres != null ?
                new ObjectParameter("nombres", nombres) :
                new ObjectParameter("nombres", typeof(string));
    
            var apellidosParameter = apellidos != null ?
                new ObjectParameter("apellidos", apellidos) :
                new ObjectParameter("apellidos", typeof(string));
    
            var fechaNacimientoParameter = fechaNacimiento.HasValue ?
                new ObjectParameter("fechaNacimiento", fechaNacimiento) :
                new ObjectParameter("fechaNacimiento", typeof(System.DateTime));
    
            var estadoCivilParameter = estadoCivil != null ?
                new ObjectParameter("estadoCivil", estadoCivil) :
                new ObjectParameter("estadoCivil", typeof(string));
    
            var gradoAcademicoParameter = gradoAcademico != null ?
                new ObjectParameter("gradoAcademico", gradoAcademico) :
                new ObjectParameter("gradoAcademico", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("direccion", direccion) :
                new ObjectParameter("direccion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ACTUALIZAR_COLABORADOR", idColaboradorParameter, nombresParameter, apellidosParameter, fechaNacimientoParameter, estadoCivilParameter, gradoAcademicoParameter, direccionParameter);
        }
    }
}
